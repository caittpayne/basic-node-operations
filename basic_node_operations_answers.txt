> Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

The Sort commands sorts a file, line by line. When executing this in my environment, chunks of sorted data were separate by special characters. The WC command prints newline, word, and byte counts for a file. When running this command, I received 36, 70, and 818. Uniq sorts each line, then returns unique lines and removes duplicates. In my environment, the output was the same as the file.

> Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

I ran 'unique commands.js | wc'. Although my output was the same, as I do not have duplicate lines, this command would filter out the duplicates and print the word count. This would be useful to find the unique amount of newlines, words, and bytes.

Programming Questions:

> Implement the head command in the commands.js file. The head command outputs the first n lines of a file (you may decide what n is). This function will be similar to cat in structure so it will be helpful to reference.

Complete.

> Implement the tail command in the commands.js file. The tail command is the inverse of the head command. It outputs the last n lines of a file (you may decide what n is).

Complete.

> It is possible that a user will input a non-existent command to our bash shell. Within commands.js create an errorHandler function which will output an error message if the command cannot be found.

Complete.

> In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.

---

const string =  "Hi I'm Cait Payne"

function reverseString(string) {
  let arr = string.split(' ');
  let newArr = [];
  arr.forEach(element => {
    let reverse = element.split('').reverse().join('');

    newArr.push(reverse);
  })
  return newArr.join(' ');
}

console.log(reverseString(string));
